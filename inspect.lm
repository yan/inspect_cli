D			[0-9]
L			[a-zA-Z_]
H			[a-fA-F0-9]
E			[Ee][+-]?{D}+

%{

#import "Type.h"
#import "y.tab.h"
	
int width_of_type(char last)
{
	switch (last)
	{
		case '8': return 1;
		case '6': return 2;
		case '2': return 4;
		case '4': return 8;
	}
	return 0;
}
	
%}

%%

u?int(8|16|32|64)	{
	yylval.t = [Type makeIntWithWidth:width_of_type(yytext[yyleng-1])
							  andSign:yytext[0] != 'u' ? TRUE : FALSE];
	return T_INT; 
}

short			{ yylval.t = [Type makeIntWithWidth:2 andSign:TRUE]; return T_INT; }
int				{ yylval.t = [Type makeIntWithWidth:4 andSign:TRUE]; return T_INT; }
long			{ yylval.t = [Type makeIntWithWidth:8 andSign:TRUE]; return T_INT; }

(char|byte)		{ return T_CHAR; }
"struct"		{ yylval.t = [Type makeStruct]; return T_STRUCT; }
"{"				{ return '{'; }
"}"				{ return '}'; }
";"				{ return ';'; }

0[xX]{H}+          { return(T_CONST); }
0{D}+              { return(T_CONST); }
{D}+               { return(T_CONST); }
'(\\.|[^\\'])+'    { return(T_CONST); }

{D}+{E}            { return(T_CONST); }
{D}*"."{D}+({E})?  { return(T_CONST); }
{D}+"."{D}*({E})?  { return(T_CONST); }

[_a-zA-Z][_a-zA-Z0-9]* { yylval.str = yytext; return T_ID; }

